-----Project Overview-----

Title: Home Buying Platform

Description: A  web application for users to browse the house . The platform allows users to search for houses, view property,
          to look into the rooms and available colours of the room. The project leverages Next.js for the frontend and Flask for the backend, 
           creating a seamless user experience and a powerful backend infrastructure. MongoDB is used as database to store the data.

Technologies Used:
Frontend: Next.js, Tailwind CSS
Backend: Flask
Database: MongoDB

Installation Instructions:
Clone the repository
Set up the Backend (Flask):Install dependencies,Configure MongoDB (set up environment variables for MongoDB URI)
Start the Flask server

Set up the Frontend (Next.js):
Install dependencies
Start the development server

Set up MongoDB:Configure the MongoDB connection URI in the backend settings.

Frontend (Next.js):
Home Page : Reference for site
Gallery Page: Displays available houses.
Layout Page: It displays the the layout of houses with hoverable rooms.
Rooms Page: It displays the room specification and allow user to make selections.

Backend(Flask)
All the API's are mounted to fetch the data from MonogDB and Pass whenever the request are made.

Architecture and Design: 
Frontend: Next.js application (pages, components, and API routes)

Backend: Flask REST API with endpoints to handle user selection, house and layout data, and room data and features.
Database: MongoDB stores user selection data, house data.

-----Diagram-----

[Frontend - Next.js]  <---> [Backend - Flask] <---> [Database - MongoDB]


     user interface
     frontend website
           |  
           | view gallery
           |
           v                 API request                                            GET
    gallery page             --------->               backend                        -------->        Database (mangodb )
    - mutiple houses        <----------              -It will handle request         <--------           -fetch data of houses 
        shown                 display                -fetch details                    -------->           to lock houses
                             house in gallery                                            GET
user clicks |
on house    |
            |
            v                  API request
    Layout Page displays      ------------>            backend                ----GET---->           Database (mangodb )
    & clickable room areas    <--------------          -handle request        <--------           -fetch  layout data 
                               shows layout            - fetch layout data                  
                                 image 
user clicks |
on rooms    |
            |                     
            v                  API request         
    Room details &             --------->            backend             ----GET---->        Database (mangodb )
    Information                <----------        -handle request        <--------         -fetch  room  data 
                               updates room       - fetch room  data       ------>             & returns data 
                                  details                                   POST


-----MongoDB Structure----- 
Totally 2 Collection
1. house collection 
2. UserSelection


-----Documentation And Review-----

  
1. House Collection - use to store all and not available houses

    {

      "house_id": <string> #used as unique identifier for each house.

      "house_name": <string> # human readble,

      "house_image": <string> #"/house1.jpg" # used to display images of a respective house,

      "rooms_image": <string> # used to display images of Layout of a respective house, "/image2.jpg",

      "description": <string> "A beautiful two-story house located in the heart of the city. Features modern amenities and spacious interiors." #to describe the house,

      "rooms": <array> [], # array of dictionaries each speficying a room to store room specifics (hovering in layout page, available selection etc)

        {

          "name": <string>  "Bedroom", # the name of the room in the layout

          "image_path": <string> # This specifies the path to an image associated with the room.

          "layout_page_details": # details required to specify the hovering details required for layout pages

            {

              "left": <int> 83, # A value of 83 means that the left edge of this area is positioned 83 units from the left side of the container.

              "top": <int> 61, # A value of 61 means that the top edge of this area is positioned 61 units from the top side.

              "width": <int> 185, # A width of 185 means the area extends 185 units to the right from the left position.

              "height": <int> 278, # A height of 278 means the area extends 278 units down from the top position.

              "color": <string> "red" # The color attribute, in this case, defines the color of the area when it is being hovered over. Here, the area is colored "red" during the hover action.

            },

          "avaialble_selections": <array> [],  # array of dictionaries each speficying selections available for the room

            {

              "key": <string> #This is a unique identifier for the color category "cabinet_colors",

              "label": <string> # This is a user-friendly label describing the color category. "Cabinet Colors",              

              "colors": <array> [] #, This is an array of available color options for the cabinet.

                   {

                    "color": <string> # code of a colour "#D2B48C" .

                    "image": <string> #path of an image to display the img when the respective color is clicked "/images/kitchenCabinet1.jpg" (an image showing the kitchen cabinets in this color)

                    }
            }

     }
    },

     {

     "locked": <boolean> null # to check the status of a house ,

      "locked_at" : <Datetime> 
     }


2. User selection- This is store all the data entered by a user 
    {
  "user_selection": {
    "house_id": "house-001",  # The unique identifier for the selected house.
    "session_id": "session-001",  # The unique session ID to track the user's interaction.
    "selected_rooms": [
      {
        "room_name": "Bedroom",  # The name of the room being selected.
        "selected_items": [
          {
            "key": "wall_colors",  # The unique identifier for the wall color category.
            "selected_color": "#00FF00",  # The selected color for the walls (Green in this case).
            "selected_image": "/images/greenWall.jpg"  # Path to an image showing the green wall color.
          },
          {
            "key": "cabinet_colors",  # The unique identifier for the cabinet color category.
            "selected_color": "#D2B48C",  # The selected color for the cabinet (Tan in this case).
            "selected_image": "/images/kitchenCabinet1.jpg"  # Path to an image of the selected cabinet color.
          },
          {
            "key": "ceiling_colors",  # The unique identifier for the ceiling color category.
            "selected_color": "#FFFF00",  # The selected color for the ceiling (Yellow in this case).
            "selected_image": "/images/yellowCeiling.jpg"  # Path to an image showing the yellow ceiling color.
          },
          {
            "key": "wardrobe_colors",  # The unique identifier for the wardrobe color category.
            "selected_color": "#800080",  # The selected color for the wardrobe (Purple in this case).
            "selected_image": "/images/wardrobePurple.jpg"  # Path to an image of the selected wardrobe color.
          }
        ]
      }
    ],
    "locked": false,  # A boolean indicating if the house (or this room) is locked or not.
    "locked_at": null  # Timestamp when the room was locked (if applicable).
  }
}

-----list of the API in simple documentation and how API interacts along with purposes-----

1.GET /houses
Fetches a list of all available houses (unlocked).

Expected Parameters:
session_id

User Interaction:
When the frontend is loaded, a request is made to fetch a list of houses. If the house is locked, it is not included in the list.

Purpose:

Fetch available houses that are not locked.
Prevent users from interacting with locked houses.

Response:
[
  {
    "house_id": "<string>",  // Unique identifier for the house
    "house_name": "<string>",  // House name
    "house_image": "/house1.jpg",  // Image path
    "description": "A beautiful two-story house located in the heart of the city."
  },
  ...
]

2.GET /rooms/<house_id>
Fetches the layout of rooms for a specific house.

Expected Parameters:house_id,session_id

User Interaction:
When a user selects a house, the layout of rooms is fetched using the house's ID. This allows the user to navigate between different rooms.

Purpose:
Display the layout of rooms for a specific house.
Allow users to navigate through rooms.

Response:
{
  "house_id": "<house_id>",
  "rooms_image": "/images/layout.jpg",  // Path to the house's layout image
  "rooms": [
    {
      "name": "Bedroom",
      "areas": {
        "bedroom": {
          "color": "blue",
          "height": 120,
          "left": 215,
          "top": 100,
          "width": 198
        }
      }
    },
    ...
  ]
}


3.GET /room-data
Fetches detailed information for a specific room in a house.

Expected Parameters: house_id,room_name,session_id
|
User Interaction:
Once the user selects a room, the frontend requests detailed information about that room (such as available color options).

Purpose:

Display room-specific information such as available color options and images.
Allow users to select customizations for the room.

Response:
{
  "images": [
    {
      "key": "wall_colors",
      "label": "Wall Colors",
      "colors": [
        {
          "color": "#afdc8b",
          "image": "/images/H2 Living Room Wall Green.jpg"
        },
        ...
      ],
      "selected_color": "#d3c5ff"
    },
    ...
  ],
  "image_path": "/images/LivingRoom.jpg",  // Image of the room
  "room_name": "Living Room"  // Name of the selected room
}

4.POST /select-room
Allows users to save their room customization preferences.

Expected Parameters: house_id,room_name,selected_rooms,preferences.

User Interaction:
After selecting preferences for various rooms (e.g., wall color, wardrobe color), the frontend sends this data to the backend to save the user's selections.

Purpose:
Save the user's selected room preferences in the database.
Ensure that the preferences are associated with the correct house and session.

Request Payload:
{
  "house_id": "house-001",  // ID of the house being customized
  "session_id": "session-001",  // Session ID
  "selected_rooms": ["Bedroom", "Living Room"],  // List of rooms selected
  "preferences": {  // Customization preferences
    "wall_colors": "#00FF00",
    "wardrobe_colors": "#800080"
  }
}


Response:
{
  "message": "Room selection updated successfully",
  "house_id": "house-001",
  "session_id": "session-001",
  "selected_rooms": ["Bedroom", "Living Room"],
  "preferences": {
    "wall_colors": "#00FF00",
    "wardrobe_colors": "#800080"
  }
}





              
     
     